name: Build, test and create release artifact
on:
  push:
    tags: '*'

jobs:
   build-and-test:
     runs-on: ubuntu-latest
     steps:
       - uses: actions/checkout@v2
       - name: Set up Java
         uses: actions/setup-java@v1
         with:
           java-version: 1.8
       # Per https://developer.atlassian.com/server/framework/atlassian-sdk/install-the-atlassian-sdk-on-a-linux-or-mac-system/
       - name: Install Atlassian SDK
         run: |
           sudo sh -c 'echo "deb https://packages.atlassian.com/debian/atlassian-sdk-deb/ stable contrib" >>/etc/apt/sources.list'
           wget https://packages.atlassian.com/api/gpg/key/public
           sudo apt-key add public
           sudo apt-get update
           sudo apt-get install -y atlassian-plugin-sdk
       - name: Build and test with Maven
         run: atlas-mvn clean package
       - name: Get Artifact Name
         # Extract the git tag version and use it to set a variable for artifact name
         id: get_artifact_name
         run: echo ::set-output name=ARTIFACT_NAME::duo_universal_atlassian_plugin-${GITHUB_REF#refs/tags/}.zip
       - name: Create zip package
         # We can't use upload-artifact to create the zip because that zip isn't accessible to other actions, only via web/api download.
         run: zip -j ${{ steps.get_artifact_name.outputs.ARTIFACT_NAME }} duo_seraph_filter/target/duo-filter-*-jar-with-dependencies.jar install.py README.md LICENSE
       - name: Create Release
         id: create_release
         uses: actions/create-release@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           tag_name: ${{ github.ref }}
           release_name: Release ${{ github.ref }}
           draft: true
           prerelease: false
       - name: Upload Release Asset
         id: upload-release-asset
         uses: actions/upload-release-asset@v1
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           upload_url: ${{ steps.create_release.outputs.upload_url }}
           asset_path: ${{ steps.get_artifact_name.outputs.ARTIFACT_NAME }}
           asset_name: ${{ steps.get_artifact_name.outputs.ARTIFACT_NAME }}
           asset_content_type: application/zip
